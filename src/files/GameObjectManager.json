{"nodes" : [{"id" : 0, "x" : 485, "y" : 130, "width" : 165, "height" : 87, "name" : "GameObjectManager", "txt" : "/**\n    A manager for all the objects in the game\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction GameObjectManager()\n{\n    /** An array of game objects \n        @type Arary\n    */\n    this.gameObjects = new Array();\n    /** An array of new game objects\n        @type Arary\n    */\n    this.addedGameObjects = new Array();\n    /** An array of removed game objects\n        @type Arary\n    */\n    this.removedGameObjects = new Array();\n    /** The time that the last frame was rendered  \n        @type Date\n    */\n    this.lastFrame = new Date().getTime();\n    /** The global scrolling value of the x axis  \n        @type Number\n    */\n    this.xScroll = 0;\n    /** The global scrolling value of the y axis  \n        @type Number\n    */\n    this.yScroll = 0;\n    /** A reference to the canvas element  \n        @type HTMLCanvasElement\n    */\n    this.canvas = null;\n    /** A reference to the 2D context of the canvas element\n        @type CanvasRenderingContext2D\n    */\n    this.context2D = null;\n    /** A reference to the in-memory canvas used as a back buffer \n        @type HTMLCanvasElement\n    */\n    this.backBuffer = null;\n    /** A reference to the backbuffer 2D context \n        @type CanvasRenderingContext2D\n    */\n    this.backBufferContext2D = null;\n    /** True if the canvas element is supported, false otherwise\n        @type Boolean\n    */\n    this.canvasSupported = false;\n    /** True if the resources supplied to the ResourceManager are all loaded, false otherwise\n        @type Boolean\n    */\n    this.resourcesLoaded = false;\n    /** The current colour of the loading screen\n        @type Number\n    */\n    this.loadingScreenCol = 0;\n    /** The direction of the changes to the loading screen colour.\n        1 = colour moving towards white\n        -1 = colour moving topwards balck\n        @type Number\n    */    \n    this.loadingScreenColDirection = 1;\n    /** How quickly to change the loading screen colour per second\n        @type Number\n    */\n    this.loadingScreenColSpeed = 255;\n\n    /**\n        Initialises this object\n        @return A reference to the initialised object\n    */\n    this.startupGameObjectManager = function()\n    {\n        // set the global pointer to reference this object\n        g_GameObjectManager = this;\n\n        // watch for keyboard events\n        document.onkeydown = function(event){g_GameObjectManager.keyDown(event);}\n        document.onkeyup = function(event){g_GameObjectManager.keyUp(event);}\n\n        // get references to the canvas elements and their 2D contexts\n        this.canvas = document.getElementById('canvas');\n\n        // if the this.canvas.getContext function does not exist it is a safe bet that\n        // the current browser does not support the canvas element.\n        // in this case we don't go any further, which will save some debuggers (like\n        // the IE8 debugger) from throwing up a lot of errors.\n        if (this.canvas.getContext)\n        {\n            this.canvasSupported = true;\n            this.context2D = this.canvas.getContext('2d');\n            this.backBuffer = document.createElement('canvas');\n            this.backBuffer.width = this.canvas.width;\n            this.backBuffer.height = this.canvas.height;\n            this.backBufferContext2D = this.backBuffer.getContext('2d');\n        }\n\n        // create a new ResourceManager\n        new ResourceManager().startupResourceManager(\n            [{name: 'runLeft', src: 'run_left.png'},\n            {name: 'runRight', src: 'run_right.png'},\n            {name: 'idleLeft', src: 'idle_left.png'},\n            {name: 'idleRight', src: 'idle_right.png'},\n            {name: 'background0', src: 'jsplatformer4_b0.png'},\n            {name: 'background1', src: 'jsplatformer4_b1.png'},\n            {name: 'background2', src: 'jsplatformer4_b2.png'},\n            {name: 'block', src: 'BlockA0.png'},\n            {name: 'gem', src: 'Gem.png'},\n            {name: 'mainmenu', src: 'mainmenu.png'},\n            {name: 'portal', src: 'portal.png'},\n            {name: 'img1', src: 'IMG1.jpg'},\n            {name: 'img2', src: 'IMG2.jpg'},\n            {name: 'img3', src: 'IMG3.jpg'},\n            {name: 'img4', src: 'IMG4.jpg'},\n            {name: 'img5', src: 'IMG5.jpg'},\n            {name: 'img6', src: 'IMG6.jpg'},\n            {name: 'img7', src: 'IMG7.jpg'},\n            {name: 'img8', src: 'IMG8.jpg'},\n            {name: 'img9', src: 'IMG9.jpg'},\n            {name: 'img10', src: 'IMG10.jpg'},\n            {name: 'img1', src: 'IMG1.jpg'},\n            {name: 'img2', src: 'IMG2.jpg'},\n            {name: 'img3', src: 'IMG3.jpg'},\n            {name: 'img4', src: 'IMG4.jpg'},\n            {name: 'img5', src: 'IMG5.jpg'},\n            {name: 'img6', src: 'IMG6.jpg'},\n            {name: 'img7', src: 'IMG7.jpg'},\n            {name: 'img8', src: 'IMG8.jpg'},\n            {name: 'img9', src: 'IMG9.jpg'},\n            {name: 'img10', src: 'IMG10.jpg'}]);\n\n        /* create a another ResourceManager instance for the\n        // the 10 image load\n        new ResourceManager().startupResourceManager(\n            [{name: 'img1', src: 'IMG1.jpg'},\n            [{name: 'img2', src: 'IMG2.jpg'},\n            [{name: 'img3', src: 'IMG3.jpg'},\n            [{name: 'img4', src: 'IMG4.jpg'},\n            [{name: 'img5', src: 'IMG5.jpg'},\n            [{name: 'img6', src: 'IMG6.jpg'},\n            [{name: 'img7', src: 'IMG7.jpg'},\n            [{name: 'img8', src: 'IMG8.jpg'},\n            [{name: 'img9', src: 'IMG9.jpg'},\n            [{name: 'img10', src: 'IMG10.jpg'}]);\n        */\n        \n        // use setInterval to call the draw function\n        setInterval(function(){g_GameObjectManager.draw();}, SECONDS_BETWEEN_FRAMES);\n        \n        return this;        \n    }\n    \n    /**\n        The render loop\n    */\n    this.draw = function ()\n    {\n        // calculate the time since the last frame\n        var thisFrame = new Date().getTime();\n        var dt = (thisFrame - this.lastFrame)/1000;\n        this.lastFrame = thisFrame;\n\n        \n        if (!this.resourcesLoaded)\n        {\n            var numLoaded = 0;\n            for (i = 0; i < g_ResourceManager.imageProperties.length; ++i)\n            {                                \n                if (g_ResourceManager[g_ResourceManager.imageProperties[i]].complete)\n                {\n                    ++numLoaded;\n                    //alert(\"Complete one image loaded\");\n                }\n            }\n            if ( numLoaded == g_ResourceManager.imageProperties.length )\n            {\n                alert(numLoaded +\" images are loaded. Press a key to Quit\");\n                \n                // create a new ApplicationManager\n                new ApplicationManager().startupApplicationManager(this.canvas.width, this.canvas.height);\n                this.resourcesLoaded = true;\n            }\n            else\n            {\n                this.loadingScreenCol += this.loadingScreenColDirection * this.loadingScreenColSpeed * dt;\n                if (this.loadingScreenCol > 255)\n                {\n                    this.loadingScreenCol = 255;\n                    this.loadingScreenColDirection = -1;\n                }\n                else if (this.loadingScreenCol < 0)\n                {\n                    this.loadingScreenCol = 0;\n                    this.loadingScreenColDirection = 1;\n                }\n                this.context2D.fillStyle = \"rgb(\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \")\";\n                this.context2D.fillRect (0, 0, this.canvas.width, this.canvas.height);\n                \n                alert(\"Still loading, should be changing color now\");\n            }\n        }\n        \n        // clear the drawing contexts\n        if (this.canvasSupported && this.resourcesLoaded)\n        {\n            this.backBufferContext2D.clearRect(0, 0, this.backBuffer.width, this.backBuffer.height);\n\n            this.addNewGameObjects();\n            this.removeOldGameObjects();\n        \n            // first update all the game objects\n            for (var x = 0; x < this.gameObjects.length; ++x)\n            {\n                if (this.gameObjects[x].update)\n                {\n                    this.gameObjects[x].update(dt, this.backBufferContext2D, this.xScroll, this.yScroll);\n                }\n            }\n\n            // then draw the game objects\n            for (var x = 0; x < this.gameObjects.length; ++x)\n            {\n                if (this.gameObjects[x].draw)\n                {\n                    this.gameObjects[x].draw(dt, this.backBufferContext2D, this.xScroll, this.yScroll);\n                }\n            }\n\n            // copy the back buffer to the displayed canvas\n            this.context2D.drawImage(this.backBuffer, 0, 0);\n        }        \n    };\n\n    this.shutdownAll = function()\n    {\n        for (var x = 0; x < this.gameObjects.length; ++x)\n        {\n            if (this.gameObjects[x].shutdown)\n            {\n                this.gameObjects[x].shutdown();\n            }\n        }\n\n        this.removeOldGameObjects();\n    }\n    \n    /**\n        Adds a new GameObject to the gameObjects collection\n        @param gameObject The object to add\n    */\n    this.addGameObject = function(gameObject)\n    {\n        this.addedGameObjects.push(gameObject);\n    };\n\n    this.addNewGameObjects = function()\n    {\n        if (this.addedGameObjects.length != 0)\n        {\n            for (var x = 0; x < this.addedGameObjects.length; ++x)\n            {\n                this.gameObjects.push(this.addedGameObjects[x]);\n            }\n\n            this.addedGameObjects.clear();\n            this.gameObjects.sort(function(a,b){return a.zOrder - b.zOrder;});\n        }\n    }\n\n    /**\n        Removes a GameObject from the gameObjects collection\n        @param gameObject The object to remove\n    */\n    this.removeGameObject = function(gameObject)\n    {\n        this.removedGameObjects.push(gameObject);\n    }\n\n    this.removeOldGameObjects = function()\n    {\n        if (this.removedGameObjects.length != 0)\n        {\n            for (var x = 0; x < this.removedGameObjects.length; ++x)\n            {\n                this.gameObjects.removeObject(this.removedGameObjects[x]);\n            }\n            this.removedGameObjects.clear();\n        }\n    }\n\n    this.keyDown = function(event)\n    {\n        for (var x = 0; x < this.gameObjects.length; ++x)\n        {\n            if (this.gameObjects[x].keyDown)\n            {\n                this.gameObjects[x].keyDown(event);\n            }\n        }\n    }\n\n    this.keyUp = function(event)\n    {\n        for (var x = 0; x < this.gameObjects.length; ++x)\n        {\n            if (this.gameObjects[x].keyUp)\n            {\n                this.gameObjects[x].keyUp(event);\n            }\n        }\n    }\n}"}], "connections" : []}