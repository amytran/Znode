{"nodes" : [{"id" : 0, "x" : 633, "y" : 176, "width" : 100, "height" : 50, "txt" : "function NodeGraph(){\n  var win = $(window);\n  var canvas = $("#canvas");\n  var overlay = $("#overlay");\n  var currentNode;\n  var currentConnection = {};\n  var connections = {};\n  var connectionId = 0;\n  var newNode;\n  var nodes = {};\n  var nodeId = 0;\n  var mouseX = 0, mouseY = 0;\n  var loops = [];\n  var pathEnd = {};\n  var zindex = 1;\n  var hitConnect;\n  var key = {};\n  var SHIFT = 16;\n  var topHeight = $("#controls").height();\n  var listClass = {};\n  var timerID = -1;\n  \n  var paper = new Raphael("canvas", "100", "100");\n  \n  function resizePaper(){\n    paper.setSize(win.width(), win.height() - topHeight);\n  }\n  win.resize(resizePaper);\n  resizePaper();\n  \n  canvas.append("<ul id='menu'><li>Left<\/li><li>Right<\/li><li>Top<\/li><li>Bottom<\/li><\/ul>");\n  var menu = $("#menu");\n  menu.css({"position" : "absolute", "left" : 100, "top" : 0, "z-index" : 5000, "border" : "1px solid gray", "padding" : 0});\n  menu.hide();\n  \n  canvas.append("<div id='hit' />");\n  hitConnect = $("#hit");\n  hitConnect.css({"position" : "absolute", "left" : 100, "top" : 0, "z-index" : 4000, "border" : "none", \n                  "width" : 10, "height": 10, "cursor":"pointer", "font-size": "1px"});\n                  \n  $("#menu li").hover(function(){\n    $(this).css("background-color", "#cccccc");\n  },\n  function(){\n    $(this).css("background-color", "white");\n  }).click(function(){\n    menu.hide();\n    var dir = $(this).text();\n    connectNode(dir);\n  });\n  \n  function connectNode(dir){\n    var node, x, y;\n    dir = dir.toLowerCase();\n    \n    \n    \n      \n    if (dir == "left"){\n      x = pathEnd.x + 5;\n      y = pathEnd.y + topHeight - currentNode.height() / 2;\n      \n    }else if (dir == "right"){\n      x = pathEnd.x - currentNode.width() - 5;\n      y = pathEnd.y + topHeight - currentNode.height() / 2;\n    }else if (dir == "top"){\n      x = pathEnd.x - currentNode.width() / 2;\n      y = pathEnd.y + topHeight + 5;\n    }else if (dir == "bottom"){\n      x = pathEnd.x - currentNode.width() / 2;\n      y = pathEnd.y + topHeight - 5 - currentNode.height();\n    }\n    \n \n    node = new Node(x, y, currentNode.width(), currentNode.height());\n    saveConnection(node, dir);\n    currentNode = node;\n  }\n  \n  function createConnection(a, conA, b, conB){\n      var link = paper.path("M 0 0 L 1 1");\n      link.attr({"stroke-width":2});\n      link.parent = a[conA];\n      \n      a.addConnection(link);\n      currentConnection = link;\n      currentNode = a;\n      saveConnection(b, conB);\n  }\n  \n  function saveConnection(node, dir){\n    if (!currentConnection) return;\n    if (!currentConnection.parent) return;\n    \n    currentConnection.startNode = currentNode;\n    currentConnection.endNode = node;\n    currentConnection.startConnection = currentConnection.parent;\n    currentConnection.endConnection = node[dir.toLowerCase()];\n    \n    currentConnection.id = connectionId;\n    connections[connectionId] = currentConnection;\n    connectionId++;\n    \n    currentNode.updateConnections();\n    node.addConnection(currentConnection);\n    \n	//handle the effect of the connected line between\n	//the two nodes when the mouse pointer is on the line\n	//and away from the line.\n	//when pointer click on the line, put up alert\n    $(currentConnection.node).mouseenter(function(){\n      this.raphael.attr("stroke","#FF0000");\n    }).mouseleave(function(){\n      this.raphael.attr("stroke","#000000");\n    }).click(function(){\n      if (confirm("Are you sure you want to delete this connection?")){\n        this.raphael.remove();\n		//connections uses raphael.id, so if this line is remove,\n		//its id will be removed as well\n        delete connections[this.raphael.id];\n      }\n    });\n  }\n  \n  canvas.mousedown(function(e){\n    if (menu.css("display") == "block"){\n      if (e.target.tagName != "LI"){\n        menu.hide();\n        currentConnection.remove();\n      }\n    }\n  });\n  \n  $(document).keydown(function(e){\n    key[e.keyCode] = true;\n  }).keyup(function(e){\n    key[e.keyCode] = false;\n  });\n  \n  $(document).mousemove(function(e){\n    mouseX = e.pageX;\n    mouseY = e.pageY - topHeight;\n  }).mouseup(function(e){\n    overlay.hide();\n    var creatingNewNode = newNode;\n    \n    hitConnect.css({"left":mouseX - 5, "top":mouseY + topHeight - 5});\n    for (var i in nodes){\n      if (nodes[i]){\n        var n = nodes[i];\n        if (n != currentNode){\n          var nLoc = n.content.position();\n          if (hitTest(toGlobal(nLoc, n.left), hitConnect)){\n            saveConnection(n, "left");\n            newNode = false;\n            break;\n          }else if (hitTest(toGlobal(nLoc, n.top), hitConnect)){\n            saveConnection(n, "top");\n            newNode = false;\n            break;\n          }else if (hitTest(toGlobal(nLoc, n.right), hitConnect)){\n            saveConnection(n, "right");\n            newNode = false;\n            break;\n          }else if (hitTest(toGlobal(nLoc, n.bottom), hitConnect)){\n            saveConnection(n, "bottom");\n            newNode = false;\n            break;\n          }\n        }\n      }\n    }\n    hitConnect.css("left", "-100px");\n    \n    if (newNode){\n      if (key[SHIFT]){\n        menu.css({"left":mouseX - 10, "top":mouseY});\n        menu.show();\n      }else{\n        var dir;\n        var currDir = currentConnection.parent.attr("class");\n        if (currDir == "left"){\n          dir = "right";\n        }else if (currDir == "right"){\n          dir = "left";\n        }else if (currDir == "top"){\n          dir = "bottom";\n        }else if (currDir == "bottom"){\n          dir = "top";\n        }\n        \n        if (pathEnd.x == undefined || pathEnd.y == undefined){\n          currentConnection.remove();\n        }else{\n          connectNode(dir);\n        }\n      }\n    }\n    newNode = false;\n    \n    for (var i in loops){\n      clearInterval(loops[i]);\n    }\n    try{\n      if (loops.length > 0) document.selection.empty();\n    }catch(e){}\n    loops = [];\n    \n    if (creatingNewNode) currentNode.txt[0].focus();\n  });\n  \n  function toGlobal(np, c){\n    var l = c.position();\n    return {position : function(){ return {left: l.left + np.left, top : l.top + np.top}; },\n            width : function(){ return c.width(); },\n            height : function(){ return c.height(); }};\n  }\n  \n  //research about overlay\n  //I believe it basically puts the\n  //node on top of the trans.gif image\n  function showOverlay(){\n    overlay.show();\n    overlay.css({"width" : win.width(), "height" : win.height()}); //, "opacity": 0.1});\n  }\n  \n  function startDrag(element, bounds, dragCallback){\n    showOverlay();\n    var startX = mouseX - element.position().left;\n    var startY = mouseY - element.position().top;\n    if (!dragCallback) dragCallback = function(){};\n      var id = setInterval(function(){\n      var x = mouseX - startX;\n      var y = mouseY - startY;\n      if (bounds){\n        if (x < bounds.left) x = bounds.left;\n        if (x > bounds.right) x = bounds.right;\n        if (y < bounds.top) y = bounds.top;\n        if (y > bounds.bottom) y = bounds.bottom;\n      }\n      element.css("left", x).css("top",y);\n      dragCallback();\n    },topHeight);\n    loops.push(id);\n  }\n  \n  \n  function Node(xp, yp, w, h, noDelete, forceId){\n    \n    if (forceId){\n       nodeId = forceId;\n    }\n    this.id = nodeId;\n    nodes[nodeId] = this;\n    nodeId++;\n    \n    var curr = this;\n    this.connections = {};\n    var connectionIndex = 0;\n    \n    this.addConnection = function(c){\n      curr.connections[connectionIndex++] = c;\n      return c;\n    }\n    \n    canvas.append("<div class='node'/>");\n    var n = $(".node").last();\n    n.css({"position" : "absolute",      \n           "left" : xp, "top" : yp,\n           "width" : w, "height" : h,   \n           "border" : "1px solid gray",\n           "background-color" : "white"});\n    n.css("z-index", zindex++);\n           \n    this.content = n;\n    \n    this.width = function(){\n      return n.width();\n    }\n    this.height = function(){\n      return n.height();\n    }\n    this.x = function(){\n      return n.position().left;\n    }\n    this.y = function(){\n      return n.position().top;\n    }\n         \n    var nodeWidth = n.width();\n    var nodeHeight = n.height();\n           \n    n.append("<div class='bar'/>");\n    var bar = $(".node .bar").last();\n    bar.css({"height" : "10px", \n             "background-color" : "gray", \n             "padding" : "0", "margin": "0",\n             "font-size" : "9px", "cursor" : "pointer"});\n             \n    //a0t (new)\n	//canvas.append("<div class='inheritView'/>");\n/*	var viewWin = $("#viewWin");\n	viewWin.hide();\n	\n	var iView = $("#views");\n    bar.hover(function(){\n		bar.css("color", "blue");\n	}, function() {\n		bar.css("color", "gray");\n	}).click(function(){\n	    alert("testing");\n		//viewWin.fadeIn();\n	}\n*/\n    if (!noDelete){\n      n.append("<div class='ex'>X<\/div>");\n      var ex = $(".node .ex").last();\n      ex.css({"position":"absolute","padding-right" : 2, "padding-top" : 1, "padding-left" : 2,\n              "color" : "white", "font-family" : "sans-serif",\n              "top" : 0, "left": 0, "cursor": "pointer",\n              "font-size" : "7px", "background-color" : "gray", "z-index" : 100});\n      ex.hover(function(){\n        ex.css("color","black");\n      }, function(){\n        ex.css("color","white");\n      }).click(function(){\n      \n        if (confirm("Are you sure you want to delete this node?")){\n          curr.remove();\n        }\n      });\n    }\n   \n    n.append("<textarea class='txt' spellcheck='false' />");\n    var txt = $(".node .txt").last();\n    txt.css("position","absolute");\n   \n    txt.css({"width" : nodeWidth - 5,\n             "height" : nodeHeight - bar.height() - 5,\n             "resize" : "none", "overflow" : "hidden",\n             "font-size" : "12px" , "font-family" : "sans-serif",\n             "border" : "none","z-index":4});\n          \n    this.txt = txt;\n    \n    n.append("<div class='resizer' />");\n    var resizer = $(".node .resizer").last();\n    \n    resizer.css({"position" : "absolute" , "z-index" : 10,\n                 "width" : "10px", "height" : "10px",\n                 "left" : nodeWidth - 11, "top" : nodeHeight - 11,\n                 "background-color" : "white", "font-size" : "1px",\n                 "border" : "1px solid gray",\n                 "cursor" : "pointer"});\n    \n    n.append("<div class='left'>");\n    n.append("<div class='top'>");\n    n.append("<div class='right'>");\n    n.append("<div class='bottom'>");\n    \n    var left = $(".node .left").last();\n    left.css("left","-11px");\n    \n    var top = $(".node .top").last();\n    top.css("top","-11px");\n    \n    var right = $(".node .right").last();\n    var bottom = $(".node .bottom").last();\n    \n    setupConnection(left);\n    setupConnection(right);\n    setupConnection(top);\n    setupConnection(bottom);\n    \n    positionLeft();\n    positionRight();\n    positionTop();\n    positionBottom();\n    \n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n    \n    function positionLeft(){\n      left.css("top", n.height() / 2 - 5);\n    }\n    function positionRight(){\n      right.css("left",n.width() + 1).css("top", n.height() / 2 - 5);\n    }\n    function positionTop(){\n      top.css("left", n.width() / 2 - 5);\n    }\n    function positionBottom(){\n      bottom.css("top",n.height() + 1).css("left", n.width() / 2 - 5);\n    }\n    \n    function setupConnection(div){\n      div.css({"position" : "absolute", "width" : "10px", "padding":0,\n               "height" : "10px", "background-color" : "#aaaaaa",\n               "font-size" : "1px", "cursor" : "pointer"});\n    }\n    \n    this.connectionPos = function(conn){\n      var loc = conn.position();\n      var nLoc = n.position();\n      var point = {};\n      point.x = nLoc.left + loc.left + 5;\n      point.y = nLoc.top - topHeight + loc.top + 5;\n      return point;\n    }\n    \n    function updateConnections(){\n       for (var i in curr.connections){\n         var c = curr.connections[i];\n         if (!c.removed){\n           var nodeA = c.startNode.connectionPos(c.startConnection);\n           var nodeB = c.endNode.connectionPos(c.endConnection);\n           c.attr("path","M " + nodeA.x + " " + nodeA.y + " L " + nodeB.x + " " + nodeB.y);\n            \n         }\n       }\n    }\n    this.updateConnections = updateConnections;\n    \n   //paper.path is from Rafael.js\n   //This command creats a path element by given path\n   //data string\n   //uppercase command is absolute\n   //lowercase command is relative\n   //M = moveto\n   //M 0 0 = command M with arguments (0,0)\n   //L = lineto\n   //L 1 1 = command L with arguments (1,1)\n   function addLink(e){\n      currentNode = curr;\n      e.preventDefault();\n      showOverlay();\n	  //draw a line by first move to 0,0\n	  //and ends the line at 1,1\n      var link = paper.path("M 0 0 L 1 1");\n	  //stroke width in pixels, default is '1'\n	  //generate a line with 2 pixel width\n      link.attr({"stroke-width":2});\n      currentConnection = link;\n      currentConnection.parent = $(this);\n      \n	  //add the connection from this current node\n	  //to the new node\n      curr.addConnection(link);\n	  //position of what? the link as the line\n	  //or the other node?\n	  //might have to put breakpoint and log to \n	  //see what happen here\n	  //Maybe find out where the new node location?\n      var loc = $(this).position();\n      var nLoc = n.position();\n      var x = loc.left + nLoc.left + 5;\n      var y = loc.top + nLoc.top - topHeight + 5;\n      newNode = true;\n      \n	  //why use setInterval?\n	  //it is getting the node B x,y position\n	  //and connect the path end.\n      var id = setInterval(function(){\n        link.attr("path","M " + x + " " + y + " L " + mouseX + " " + mouseY);\n        \n        pathEnd.x = mouseX;\n        pathEnd.y = mouseY;\n      }, 30);\n	  \n	  //add the new id to the loops array?\n      loops.push(id);\n   }\n   \n   //not sure what this does yet.\n   left.mousedown(addLink);\n   right.mousedown(addLink);\n   top.mousedown(addLink);\n   bottom.mousedown(addLink);\n   \n   //handle the "x" deletion of the node\n   this.remove = function(){\n     for (var i in curr.connections){\n       var c = curr.connections[i];\n       c.remove();\n       delete connections[c.id];\n       delete curr.connections[i];\n     }\n     n.remove();\n     delete nodes[this.id];\n   }\n    \n    resizer.mousedown(function(e){\n      currentNode = curr;\n      e.preventDefault();\n      startDrag(resizer, {left : 20, top : 20, right : 500, bottom : 500},\n      function(){\n        var loc = resizer.position();\n        var x = loc.left;\n        var y = loc.top;\n        n.css({"width" : x + resizer.width() + 1,\n               "height" : y + resizer.height() + 1});\n        \n        txt.css({"width" : n.width() - 5, "height" : n.height() - bar.height() - 5});\n        \n        positionLeft();\n        positionRight();\n        positionTop();\n        positionBottom();\n        updateConnections();\n      });\n    });\n    \n	//hanlde when the user drag the node on the bar\n	//to move it around\n    bar.mousedown(function(e){\n      currentNode = curr;\n      n.css("z-index", zindex++);\n      e.preventDefault();\n      startDrag(n, {left : 10, top: 40, right : win.width() - n.width() - 10, bottom : win.height() - n.height() - 10},\n	  //update the connection so it flows with it\n      updateConnections);\n    });\n    \n	//don't see any obvious effect\n    n.mouseenter(function(){\n      n.css("z-index", zindex++);\n    });\n    \n  }//end of function node\n  \n  function hitTest(a, b){\n    var aPos = a.position();\n    var bPos = b.position();\n    \n    var aLeft = aPos.left;\n    var aRight = aPos.left + a.width();\n    var aTop = aPos.top;\n    var aBottom = aPos.top + a.height();\n    \n    var bLeft = bPos.left;\n    var bRight = bPos.left + b.width();\n    var bTop = bPos.top;\n    var bBottom = bPos.top + b.height();\n    \n    // http://tekpool.wordpress.com/2006/10/11/rectangle-intersection-determine-if-two-given-rectangles-intersect-each-other-or-not/\n    return !( bLeft > aRight\n      || bRight < aLeft\n      || bTop > aBottom\n      || bBottom < aTop\n      );\n  }\n  \n  \n function clear(){\n    nodeId = 0;\n    connectionsId = 0;\n    for (var i in nodes){\n      nodes[i].remove();\n    }\n  }\n  \n  this.clearAll = function(){\n    clear();\n    defaultNode();\n    currentConnection = null;\n    currenNode = null;\n  }\n  \n  this.addNode = function(x, y, w, h, noDelete){\n    return new Node(x, y, w, h, noDelete);\n  }\n  \n  var defaultWidth = 100;\n  var defaultHeight = 50;\n  \n  this.addNodeAtMouse = function(){\n    alert("Zevan");\n    var w = currentNode.width() || defaultWidth;\n    var h = currentNode.height () || defaultHeight;\n    var temp = new Node(mouseX, mouseY + 30, w, h);\n    currentNode = temp;\n    currentConnection = null;\n  }\n  \n  function defaultNode(){\n    \n	/*a0t \n	 * win.width and win.height varies \n	 * depending how big or small you have the browser window.\n	 * defaultWidth = 100\n	 * defaultHeight = 50\n	 * create new node with xp, yp, w, h, noDelete = true\n	 */\n	 \n	console.log("win.width: \n" + win.width());\n	console.log("win.height: \n" + win.height());\n	console.log("width: \n" + defaultWidth);\n	console.log("height: \n" + defaultHeight);\n	\n    var temp = new Node(win.width() / 2 - defaultWidth / 2, \n                        win.height() / 2 - defaultHeight / 2,\n                        defaultWidth, defaultHeight, true);\n    temp.txt[0].focus();  //focus the cursor in the node for text input\n    currentNode = temp;\n  }\n  defaultNode(); //call to create the default node\n\n  this.fromJSON = function(data){\n    //clear what is on the canvas prior to opening the \n	//selected file\n    clear();\n	//loop through all the data nodes of this saved json file\n	//and build the graph out of the data\n    for (var i in data.nodes){\n      var n = data.nodes[i];\n	  //ex is the indicator for noDelete\n      var ex = (i == "0") ? true : false;\n      var temp = new Node(n.x, n.y, n.width, n.height, ex, n.id);\n	  //replace the node text string \n with '\n'\n      var addreturns = n.txt.replace(/\\n/g,'\n');\n      temp.txt.val(addreturns);\n	  console.log("text val: " + temp.txt.val());\n	  listClass[i] = temp.txt.val();\n    }\n	//builds the connectors of the nodes\n    for (i in data.connections){\n      var c = data.connections[i];\n	  //get the data of the connector from node A to B\n	  //and which area to connect to left, right, top, bottom (conA/conB)\n      createConnection(nodes[c.nodeA], c.conA, nodes[c.nodeB], c.conB);\n    }\n  }\n  \n  this.toJSON = function(){\n    var json = '{"nodes" : [';\n    for (var i in nodes){\n      var n = nodes[i];\n      json += '{"id" : ' + n.id + ', ';\n      json += '"x" : ' + n.x() + ', ';\n      json += '"y" : ' + n.y() + ', ';\n      json += '"width" : ' + n.width() + ', ';\n      json += '"height" : ' + n.height() + ', ';\n      json += '"txt" : "' + addSlashes(n.txt.val()) + '"},';\n    }\n    json = json.substr(0, json.length - 1);\n    json += '], "connections" : [';\n    \n    var hasConnections = false;\n    for (i in connections){\n      var c = connections[i];\n      if (!c.removed){\n      json += '{"nodeA" : ' + c.startNode.id + ', ';\n      json += '"nodeB" : ' + c.endNode.id + ', ';\n      json += '"conA" : "' + c.startConnection.attr("class") + '", ';\n      json += '"conB" : "' + c.endConnection.attr("class") + '"},';\n      hasConnections = true;\n      }\n    }\n    if (hasConnections){\n      json = json.substr(0, json.length - 1);\n    }\n    json += ']}';\n    return json;\n  }\n  \n  function addSlashes(str) {\n    str = str.replace(/\\/g,'\\\\');\n    str = str.replace(/\'/g,'\\\'');\n    str = str.replace(/\"/g,'\\"');\n    str = str.replace(/\0/g,'\\0');\n    str = str.replace(/\n/g,'\\\\n');\n    return str;\n  }\n  \n  this.getClassList = function()\n  {\n	console.log("list: " + listClass[0]);\n	return listClass;\n  }\n  \n  this.setTimer = function(t)\n  {\n	timerID = t;\n  }\n  \n  function getTimer()\n  {\n	return timerID;\n  }\n  \n  this.displayInheritance = function(newWin, cData)\n  {\n	console.log("in displayInheritance func" + newWin);\n	\n	//display the list\n	var superc = newWin.document.getElementById("superclass");\n	var subc1 = newWin.document.getElementById("subclass1");\n	var subc2 = newWin.document.getElementById("subclass2");\n	\n	console.log("ready " + cData[0] + " " + getTimer());\n	//display the string to the new window\n	superc.innerHTML = String(cData[0]);\n	subc1.innerHTML = String(cData[1]);\n	subc2.innerHTML = String(cData[2]);\n	self.clearInterval(getTimer());	\n  }\n}"},{"id" : 4, "x" : 450, "y" : 238, "width" : 100, "height" : 50, "txt" : "$(function(){\n  \n  //instantiate a NodeGraph object\n  var graph = new NodeGraph();\n  \n  //instantiate a NodeData object\n  //var nodeData = new NodeData();\n  \n  //This is where it creates a node\n  //on the canvas when a mouse is click on the canvas\n  \n  // consider moving to NodeGraph\n  $("#canvas").mouseup(function(e){\n     if (openWin.css("display") == "none"){\n       var children = $(e.target).children();\n       if (children.length > 0){\n         var type = children[0].tagName;\n         if (type == "desc" || type == "SPAN"){\n           graph.addNodeAtMouse();\n         }\n       }\n     }\n	 \n    if (viewWin.css("display") == "none"){\n       var children = $(e.target).children();\n       if (children.length > 0){\n         var type = children[0].tagName;\n         if (type == "desc" || type == "SPAN"){\n           graph.addNodeAtMouse();\n         }\n       }\n     }\n\n  });\n  \n  // ui code\n  var openWin = $("#openWin");\n  openWin.hide();\n\n  //a0t (new)\n  var viewWin = $("viewWin");\n  viewWin.hide();\n  \n  //$(selector).mouseenter() is jquery event\n  //this event occurs when the mouse pointer is over an element\n  //jquery effect custom animations syntax\n  //$(selector).animate({params},[duration],[easing],[callback])\n  //200 below is the duration - speed of the animation.  Possible values\n  //are "fast", "slow", "normal", or milliseconds.\n  $(".btn").mouseenter(function(){\n    $(this).animate({"backgroundColor" : "white"}, 200);\n  }).mouseleave(function(){\n    $(this).animate({"backgroundColor" : "#efefef"});\n  });\n  $("#clear").click(function(){\n    graph.clearAll();\n  });\n  $("#help").click(function(){\n    //open() method that opens a new window with the URL and the name of the window\n	//this is JS & DOM reference\n	//window.open(URL,name,specs,replace)\n	//only URL is required, other parameters are optional\n	//_blank - URL is loaded into a new window.  This is default\n    window.open("http://www.zreference.com/znode", "_blank");\n  });\n  \n  //when save option is click, call saveFile function\n  $("#save").click(saveFile);\n  \n  function saveFile(){\n    var name = filename.val();\n    if (name == "" || name == nameMessage){\n      alert("Please Name Your File");\n      filename[0].focus();\n      return;\n    }\n    $.post("json/save.php", {data:graph.toJSON(), name:name}, function(data){\n      alert("Your file was saved.");\n    });\n  }\n  \n  //if the open control window is displayed,\n  //then if the user click the mouse on the canvas\n  //the open window fades out\n  $("#canvas").mousedown(function(){\n    openWin.fadeOut();\n  });\n  \n  //open menu is click, list all the \n  //saved .json files\n  $("#open").click(function(){\n    var fileList =  $("#files");\n	//what does this loading really do?\n	//it just puts the text on the division\n	//while the data is being load, but didn't see it\n	//because not that many files to load\n    fileList.html("<div>loading...<\/div>");\n    openWin.fadeIn();\n    fileList.load("json/files.php?"+Math.random()*1000000);\n	console.log("fileList: " + fileList);\n  });\n  \n  var nameMessage = "Enter your file name";\n  var filename = $("#filename").val(nameMessage);\n\n  filename.focus(function(){\n    if ($(this).val() == nameMessage){\n      $(this).val("");\n    }\n  }).blur(function(){\n    if ($(this).val() == ""){\n      $(this).val(nameMessage);\n    }\n  });\n  \n  //event.preventDefault() stops the default action of an element\n  //such as preventing a form being submitted when a submit button\n  //is clicked.\n  $("#nameForm").submit(function(e){\n    e.preventDefault();\n    saveFile();\n  });\n\n  //a0t (new)\n  $("#inherit").click(function(){\n	console.log("inherit button click");\n	var clist =  $("#views");\n	clist.html("<div>loading...<\/div>");\n	viewWin.fadeIn();\n	clist.load("json/files.php?"+Math.random()*1000000);\n	var data = graph.getClassList();\n	//classData = graph.getClassList();\n	console.log("inherit - getData: " + data[0]);\n	//nodeData.setupNodeData(data);\n	var iWin = window.open("inheritView.html", "newWin");\n	//var t = setTimeout("test()", 3000);\n	var timerID = self.setInterval(function() {graph.displayInheritance(iWin, data);}, 3000)\n	graph.setTimer(timerID);\n	\n	//alert("why can't I see the window?" + timerID);\n  });\n  \n  //Process the click action when a saved file\n  //in the open window.\n  $(".file").live('click', function() {\n    var name = $(this).text();\n	//$(selector).getJSON(url,data,success(data,status,xhr))\n	//only url is required.\n	//what is the second parameter trying to do with the random?\n	//I believe it gets the data from the url\n    $.getJSON("files/" + name + ".json", {n:Math.random()}, function(data){\n	   //get the graph data and put it on the canvas\n       graph.fromJSON(data);\n       //get the file name and put it in the form name field Name: \n       filename.val(name);\n    });\n  }).live('mouseover', function(){\n    $(this).css({"background-color": "#ededed"});\n  }).live("mouseout", function(){\n    $(this).css({"background-color": "white"});\n  });\n  \n  \n  \n});"},{"id" : 5, "x" : 859, "y" : 203, "width" : 100, "height" : 50, "txt" : "nice"}], "connections" : [{"nodeA" : 0, "nodeB" : 4, "conA" : "left", "conB" : "top"},{"nodeA" : 0, "nodeB" : 5, "conA" : "right", "conB" : "left"}]}